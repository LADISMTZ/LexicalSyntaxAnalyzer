
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Lexer;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\004\000\002\007\006\000\002\005\007\000\002\002\010" +
    "\000\002\003\010\000\002\004\012\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\010\030\012\031\013\033\007\001\002\000" +
    "\020\002\uffea\025\uffea\026\uffea\030\012\031\013\032\uffea" +
    "\033\007\001\002\000\020\002\uffec\025\uffec\026\uffec\030" +
    "\012\031\013\032\uffec\033\007\001\002\000\004\002\071" +
    "\001\002\000\004\022\014\001\002\000\020\002\uffe6\025" +
    "\uffe6\026\uffe6\030\012\031\013\032\uffe6\033\007\001\002" +
    "\000\020\002\uffe8\025\uffe8\026\uffe8\030\012\031\013\032" +
    "\uffe8\033\007\001\002\000\004\013\042\001\002\000\004" +
    "\022\014\001\002\000\010\004\031\005\026\030\030\001" +
    "\002\000\004\024\016\001\002\000\010\030\012\031\013" +
    "\033\007\001\002\000\006\025\020\032\021\001\002\000" +
    "\004\021\025\001\002\000\010\030\012\031\013\033\007" +
    "\001\002\000\004\025\023\001\002\000\004\021\024\001" +
    "\002\000\020\002\uffed\025\uffed\026\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\001\002\000\020\002\uffee\025\uffee\026" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\001\002\000\036" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\023\uffff" +
    "\030\uffff\001\002\000\010\004\031\005\026\030\030\001" +
    "\002\000\036\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\030\ufffe\001\002\000\036\004\000\005\000" +
    "\006\000\007\000\010\000\011\000\012\000\015\000\016" +
    "\000\017\000\020\000\021\000\023\000\030\000\001\002" +
    "\000\014\012\034\015\036\016\040\017\035\020\037\001" +
    "\002\000\004\023\041\001\002\000\004\023\ufffd\001\002" +
    "\000\004\023\ufffa\001\002\000\004\023\ufffc\001\002\000" +
    "\004\023\ufff9\001\002\000\004\023\ufffb\001\002\000\006" +
    "\024\ufff0\027\ufff0\001\002\000\012\004\031\005\026\022" +
    "\043\030\030\001\002\000\012\004\031\005\026\022\043" +
    "\030\030\001\002\000\020\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\021\ufff8\023\ufff8\001\002\000\016\005\046" +
    "\006\052\007\051\010\050\011\053\021\047\001\002\000" +
    "\020\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\021\ufff2" +
    "\023\ufff2\001\002\000\020\002\ufff1\025\ufff1\026\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\001\002\000\010\004\031" +
    "\005\026\030\030\001\002\000\010\004\031\005\026\030" +
    "\030\001\002\000\010\004\031\005\026\030\030\001\002" +
    "\000\010\004\031\005\026\030\030\001\002\000\020\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\021\ufff6\023\ufff6" +
    "\001\002\000\020\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\021\ufff4\023\ufff4\001\002\000\020\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\021\ufff3\023\ufff3\001\002\000" +
    "\020\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\021\ufff5" +
    "\023\ufff5\001\002\000\016\005\046\006\052\007\051\010" +
    "\050\011\053\023\061\001\002\000\020\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\021\ufff7\023\ufff7\001\002\000" +
    "\012\002\uffe7\025\uffe7\026\uffe7\032\uffe7\001\002\000\012" +
    "\002\uffe5\025\uffe5\026\uffe5\032\uffe5\001\002\000\004\027" +
    "\065\001\002\000\010\030\012\031\013\033\007\001\002" +
    "\000\004\026\067\001\002\000\004\021\070\001\002\000" +
    "\020\002\uffef\025\uffef\026\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\001\002\000\004\002\001\001\002\000\012\002" +
    "\uffeb\025\uffeb\026\uffeb\032\uffeb\001\002\000\012\002\uffe9" +
    "\025\uffe9\026\uffe9\032\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\014\002\007\003\010\004\003\006\005\007" +
    "\004\001\001\000\014\002\007\003\010\004\003\006\072" +
    "\007\004\001\001\000\014\002\007\003\010\004\003\006" +
    "\071\007\004\001\001\000\002\001\001\000\004\005\063" +
    "\001\001\000\014\002\007\003\010\004\003\006\062\007" +
    "\004\001\001\000\014\002\007\003\010\004\003\006\061" +
    "\007\004\001\001\000\002\001\001\000\004\005\014\001" +
    "\001\000\004\011\026\001\001\000\002\001\001\000\014" +
    "\002\007\003\010\004\003\006\016\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\007\003\010" +
    "\004\003\006\021\007\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\044\011\043\001\001\000\006\010\057\011\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\056\001\001\000\004\011" +
    "\055\001\001\000\004\011\054\001\001\000\004\011\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\007\003\010\004\003\006\065\007\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    /*private int errorCounter = 0;
    private LexerCup lexer;

        public Syntax(LexerCup lexer) {
            this.lexer = lexer;
        }

        public void setLexer(LexerCup lexer) {
            this.lexer = lexer;
        }

        public Symbol parseNextToken() throws java.io.IOException {
            Symbol token = lexer.next_token();
            return token;
        }

        public void incrementErrorCount() {
            errorCounter++;
        }

        public int errorCount() {
            return errorCounter;
        }*/

        public void syntax_error(Symbol s)
        {
            this.s = s;
        }

        public Symbol getS(){
            return this.s;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= STATEMENT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OPERAND ::= Num 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAND",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPERAND ::= NegNum 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAND",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPERAND ::= Var 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERAND",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPERATOR ::= Equal 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPERATOR ::= RightEqual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPERATOR ::= Right 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPERATOR ::= Left 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERATOR ::= LeftEqual 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MATHEXPRESSION ::= OPERAND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MATHEXPRESSION ::= LeftParenthesis MATHEXPRESSION RightParenthesis 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MATHEXPRESSION ::= MATHEXPRESSION Plus OPERAND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MATHEXPRESSION ::= MATHEXPRESSION Minus OPERAND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MATHEXPRESSION ::= MATHEXPRESSION Div OPERAND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MATHEXPRESSION ::= MATHEXPRESSION Mul OPERAND 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MATHEXPRESSION ::= MATHEXPRESSION NegNum 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("MATHEXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASSIGNMENT ::= Var Assign MATHEXPRESSION SemiColon 
            {
              Object RESULT =null;
		 System.out.println("Valid Assignment."); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONDITION ::= LeftParenthesis OPERAND OPERAND OPERATOR RightParenthesis 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WHILE ::= While CONDITION Do STATEMENT EndWhile SemiColon 
            {
              Object RESULT =null;
		 System.out.println("Valid While."); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILE",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= If CONDITION Then STATEMENT EndIf SemiColon 
            {
              Object RESULT =null;
		 System.out.println("Valid If."); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IF",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFELSE ::= If CONDITION Then STATEMENT Else STATEMENT EndIf SemiColon 
            {
              Object RESULT =null;
		 System.out.println("Valid IfElse."); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IFELSE",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STATEMENT ::= ASSIGNMENT STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // STATEMENT ::= IFELSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT ::= IFELSE STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENT ::= IF 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT ::= IF STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STATEMENT ::= WHILE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STATEMENT ::= WHILE STATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("STATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
